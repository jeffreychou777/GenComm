name: V2XReal_Baselines_stage1_m2_att
root_dir: "opencood/dataset/v2xreal/train"
validate_dir: "opencood/dataset/v2xreal/test"
test_dir: "opencood/dataset/v2xreal/test"

dataset_mode: "vc"

yaml_parser: "load_general_params"
train_params:
  batch_size: &batch_size 2
  epoches: 20
  eval_freq: 2
  save_freq: 2
  max_cav: 5

comm_range: 70
input_source: ['lidar']
label_type: 'lidar'
cav_lidar_range: &cav_lidar [-102.4, -51.2, -15, 102.4, 51.2, 15]

heter:
  assignment_path: "opencood/modality_assign/v2xreal_4modality.json" 
  ego_modality: &ego_modality "m2"
  mapping_dict:
    m1: m2
    m2: m2
    m3: m2
    m4: m2
  modality_setting:
    m2:
      sensor_type: &sensor_type_m2 'lidar'
      core_method: &core_method_m2 "point_pillar"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size [0.4, 0.4, 30]
          max_points_per_voxel: 32
          max_voxel_train: 64000
          max_voxel_test: 640000
        # lidar range for each individual cav.
        cav_lidar_range: *cav_lidar


fusion:
  core_method: 'intermediateheterv2xreal'
  dataset: 'v2xreal'
  args: 
    proj_first: false
    grid_conf: None # place-holder
    data_aug_conf: None # place-holder

data_augment: # no use in intermediate fusion
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: [0.4, 0.4, 30] # useful
    max_points_per_voxel: 32 # useless
    max_voxel_train: 64000 # useless
    max_voxel_test: 640000 # useless
  # lidar range for each individual cav.
  cav_lidar_range: *cav_lidar
  num_class: &num_class 3
  anchor_generator_config: &anchor_generator_config
    - 'class_name': 'vehicle'
      'anchor_sizes': [ [ 3.9, 1.6, 1.56 ] ]
      'anchor_rotations': [ 0, 1.57 ]
      'anchor_bottom_heights': [ -1.78 ]
      'align_center': True
      'feature_map_stride': 2
      'matched_threshold': 0.6
      'unmatched_threshold': 0.45
    - 'class_name': 'pedestrian'
      'anchor_sizes': [ [ 0.8, 0.6, 1.73 ] ]
      'anchor_rotations': [ 0, 1.57 ]
      'anchor_bottom_heights': [ -0.6 ]
      'align_center': True
      'feature_map_stride': 2
      'matched_threshold': 0.5
      'unmatched_threshold': 0.35
    - 'class_name': 'truck'
      'anchor_sizes': [ [ 8, 3, 3 ] ]
      'anchor_rotations': [ 0, 1.57 ]
      'anchor_bottom_heights': [ -1.78 ]
      'align_center': True
      'feature_map_stride': 2
      'matched_threshold': 0.6
      'unmatched_threshold': 0.45


# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: &anchor_yaw [0, 90]
    feature_stride: 2
    num: &anchor_num 2
    anchor_generator_config: *anchor_generator_config


  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.2
  order: 'hwl' # hwl or lwh
  max_num: 150 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15
  dir_args: &dir_args
    dir_offset: 0.7853
    num_bins: 2
    anchor_yaw: *anchor_yaw

# model related
model:
  core_method: heter_model_baseline
  args:
    ego_modality: *ego_modality
    lidar_range: *cav_lidar

    m2:
      core_method: *core_method_m2
      sensor_type: *sensor_type_m2

      encoder_args:
        voxel_size: *voxel_size
        lidar_range: *cav_lidar
        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
        point_pillar_scatter:
          num_features: 64

      backbone_args:
        layer_nums: [3, 5,]
        layer_strides: [2, 2,]
        num_filters: [64, 128,]
        upsample_strides: [1, 2,]
        num_upsample_filter: [128, 128,]
  
      shrink_header: 
        kernal_size: [ 3 ]
        stride: [ 1 ]
        padding: [ 1 ]
        dim: [ 256 ]
        input_dim: 256 # 128 * 3

    fusion_method: att 
    att:
      feat_dim: 256

    in_head: 256
    num_class: *num_class


    anchor_number: *anchor_num
    dir_args: *dir_args

loss:
  core_method: point_pillar_v2xreal_loss
  args:
    cls_weight: 1.0
    reg: 2.0
    num_class: *num_class

optimizer:
  core_method: Adam
  lr: 0.002
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 15]

