name: DAIR_Baselines_stamp_stage2_m0m1_v2xvit
data_dir: "opencood/dataset/dair_v2x"
root_dir: "opencood/dataset/dair_v2x/train.json"
validate_dir: "opencood/dataset/dair_v2x/val.json"
test_dir: "opencood/dataset/dair_v2x/val.json"


yaml_parsers: 
  m0: "load_general_params"
  m1: "load_general_params"
train_params:
  batch_size: &batch_size 1
  epoches: 5
  eval_freq: 1
  save_freq: 1
  max_cav: 5

# verify_mode: True
# yaml_parser: "load_general_params"
# train_params:
#   batch_size: &batch_size 1
#   epoches: 5
#   eval_freq: 1
#   save_freq: 1
#   max_cav: 5

comm_range: 70
input_source: ['lidar',]
label_type: 'lidar'
# ego_diff_cav: True
cav_lidar_range: &cav_lidar [-102.4, -51.2, -3, 102.4, 51.2, 1]

add_data_extension: ['bev_visibility.png']


heter:
  ego_modality: &ego_modality "m1"
  protocol_modality: &protocol_modality "m0"
  mapping_dict:
    m1: m1
    m2: m1
  modality_setting:
    m0:
      sensor_type: &sensor_type_m0 'lidar'
      core_method: &core_method_m0 "point_pillar"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size_m0 [0.4, 0.4, 5]
          max_points_per_voxel: 32
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: &cav_lidar_m0 [-102.4, -51.2, -3, 102.4, 51.2, 1]
    
      postprocess:
        core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
        gt_range: *cav_lidar_m0
        voxel_size: *voxel_size_m0
        anchor_args:
          cav_lidar_range: *cav_lidar_m0
          l: 3.9
          w: 1.6
          h: 1.56
          r: &anchor_yaw_m0 [0, 90]
          feature_stride: 4
          num: &anchor_num_m0 2
        target_args:
          pos_threshold: 0.6
          neg_threshold: 0.45
          score_threshold: 0.2
        order: 'hwl' # hwl or lwh
        max_num: 150 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
        nms_thresh: 0.15
        dir_args: &dir_args_m0
          dir_offset: 0.7853
          num_bins: 2
          anchor_yaw: *anchor_yaw_m0

    m1:
      sensor_type: &sensor_type_m1 'lidar'
      core_method: &core_method_m1 "point_pillar"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size_m1 [0.4, 0.4, 5]
          max_points_per_voxel: 32
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: &cav_lidar_m1 [-102.4, -51.2, -3, 102.4, 51.2, 1]
    
      postprocess:
        core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
        gt_range: *cav_lidar_m1
        voxel_size: *voxel_size_m1
        anchor_args:
          cav_lidar_range: *cav_lidar_m1
          l: 3.9
          w: 1.6
          h: 1.56
          r: &anchor_yaw_m1 [0, 90]
          feature_stride: 4
          num: &anchor_num_m1 2
        target_args:
          pos_threshold: 0.6
          neg_threshold: 0.45
          score_threshold: 0.2
        order: 'hwl' # hwl or lwh
        max_num: 150 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
        nms_thresh: 0.15
        dir_args: &dir_args_m1
          dir_offset: 0.7853
          num_bins: 2
          anchor_yaw: *anchor_yaw_m1

    # m3:
    #   sensor_type: &sensor_type_m3 'lidar'
    #   core_method: &core_method_m3 "second"

    #   # lidar requires preprocess
    #   preprocess:
    #     # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
    #     core_method: 'SpVoxelPreprocessor'
    #     args:
    #       voxel_size: &voxel_size_m3 [0.1, 0.1, 0.1]
    #       max_points_per_voxel: 5
    #       max_voxel_train: 32000
    #       max_voxel_test: 70000


    #     # lidar range for each individual cav.
    #     cav_lidar_range: &cav_lidar_m3 [-102.4, -51.2, -3, 102.4, 51.2, 1]
    #   postprocess:
    #     core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
    #     gt_range: *cav_lidar_m3
    #     voxel_size: *voxel_size_m3
    #     anchor_args:
    #       cav_lidar_range: *cav_lidar_m3
    #       l: 3.9
    #       w: 1.6
    #       h: 1.56
    #       r: &anchor_yaw_m3 [0, 90]
    #       feature_stride: 4
    #       num: &anchor_num_m3 2
    #     target_args:
    #       pos_threshold: 0.6
    #       neg_threshold: 0.45
    #       score_threshold: 0.2
    #     order: 'hwl' # hwl or lwh
    #     max_num: 150 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
    #     nms_thresh: 0.15
    #     dir_args: &dir_args_m3
    #       dir_offset: 0.7853
    #       num_bins: 2
    #       anchor_yaw: *anchor_yaw_m3
fusion:
  stamp: true  ##### This is a flag that only used for method "STAMP"
  core_method: 'intermediateheteradapter'
  dataset: 'dairv2x'
  args: 
    proj_first: false
    grid_conf: None # place-holder
    data_aug_conf: None # place-holder


# preprocess:
#   # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
#   core_method: 'SpVoxelPreprocessor'
#   args:
#     voxel_size: [0.4, 0.4, 4] # useful
#     max_points_per_voxel: 1 # useless
#     max_voxel_train: 1 # useless
#     max_voxel_test: 1 # useless
#   # lidar range for each individual cav.
#   cav_lidar_range: *cav_lidar

# # anchor box related
# postprocess:
#   core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
#   gt_range: *cav_lidar
#   anchor_args:
#     cav_lidar_range: *cav_lidar
#     l: 3.9
#     w: 1.6
#     h: 1.56
#     r: &anchor_yaw [0, 90]
#     feature_stride: 4
#     num: &anchor_num 2
#   target_args:
#     pos_threshold: 0.6
#     neg_threshold: 0.45
#     score_threshold: 0.2
#   order: 'hwl' # hwl or lwh
#   max_num: 150 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
#   nms_thresh: 0.15
#   dir_args: &dir_args
#     dir_offset: 0.7853
#     num_bins: 2
#     anchor_yaw: *anchor_yaw

# model related
model:
  core_method: heter_model_baseline_w_stamp
  args:
    stage: train_adapter
    lidar_range: *cav_lidar
    ego_modality: *ego_modality
    protocol_modality: *protocol_modality
    m0:
      core_method: *core_method_m0
      sensor_type: *sensor_type_m0
      lidar_range: *cav_lidar_m0
      encoder_args:
        voxel_size: *voxel_size_m0
        lidar_range: *cav_lidar_m0
        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
        point_pillar_scatter:
          num_features: 64

      backbone_args:
        layer_nums: [3, 5, 8]
        layer_strides: [2, 2, 2]
        num_filters: [64, 128, 256]
        upsample_strides: [1, 2, 4]
        num_upsample_filter: [128, 128, 128]

      shrink_header: 
        kernal_size: [ 3 ]
        stride: [ 2 ]
        padding: [ 1 ]
        dim: [ 128 ]
        input_dim: 384 # 128 * 3

      aligner_args:
        core_method: identity
      adapter:
        core_method: adapterconvnext
        args:
          in_channels: 128
          out_channels: 128
          in_cav_lidar_range: *cav_lidar_m0
          out_cav_lidar_range: *cav_lidar_m0
          in_feature_shape: [128, 256]
          out_feature_shape: [128, 256]
          submodule_args:
            num_of_blocks: 3
            dim: 64
      reverter:
        core_method: adapterconvnext
        args:
          in_channels: 128
          out_channels: 128
          in_cav_lidar_range: *cav_lidar_m0
          out_cav_lidar_range: *cav_lidar_m0
          in_feature_shape: [128, 256]
          out_feature_shape: [128, 256]
          submodule_args:
            num_of_blocks: 3
            dim: 64
            
      in_head: 128
      anchor_number: *anchor_num_m0
      dir_args: *dir_args_m0

    fusion_method: v2xvit
    v2xvit:
      transformer:
        encoder: &encoder_m0
          # number of fusion blocks per encoder layer
          num_blocks: 1
          # number of encoder layers
          depth: 3
          use_roi_mask: true
          use_RTE: &use_RTE_m0 false
          RTE_ratio: &RTE_ratio_m0 0 # 2 means the dt has 100ms interval while 1 means 50 ms interval
          # agent-wise attention
          cav_att_config: &cav_att_config_m0
            dim: 128
            use_hetero: true
            use_RTE: *use_RTE_m0
            RTE_ratio: *RTE_ratio_m0
            heads: 8
            dim_head: 32
            dropout: 0.3
          # spatial-wise attention
          pwindow_att_config: &pwindow_att_config_m0
            dim: 128
            heads: [16, 8, 4]
            dim_head: [16, 32, 64]
            dropout: 0.3
            window_size: [4, 8, 16]
            relative_pos_embedding: true
            fusion_method: 'split_attn128'
          # feedforward condition
          feed_forward: &feed_forward_m0
            mlp_dim: 128
            dropout: 0.3
          sttf: &sttf
            voxel_size: *voxel_size_m0
            downsample_rate: 4  

    m1:
      core_method: *core_method_m1
      sensor_type: *sensor_type_m1
      lidar_range: *cav_lidar_m1
      encoder_args:
        voxel_size: *voxel_size_m1
        lidar_range: *cav_lidar_m1
        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
        point_pillar_scatter:
          num_features: 64

      backbone_args:
        layer_nums: [3, 5, 8]
        layer_strides: [2, 2, 2]
        num_filters: [64, 128, 256]
        upsample_strides: [1, 2, 4]
        num_upsample_filter: [128, 128, 128]

      shrink_header: 
        kernal_size: [ 3 ]
        stride: [ 2 ]
        padding: [ 1 ]
        dim: [ 128 ]
        input_dim: 384 # 128 * 3

      aligner_args:
        core_method: identity
      adapter:
        core_method: adapterconvnext
        args:
          in_channels: 128
          out_channels: 128
          in_cav_lidar_range: *cav_lidar_m1
          out_cav_lidar_range: *cav_lidar_m1
          in_feature_shape: [128, 256]
          out_feature_shape: [128, 256]
          submodule_args:
            num_of_blocks: 3
            dim: 64
      reverter:
        core_method: adapterconvnext
        args:
          in_channels: 128
          out_channels: 128
          in_cav_lidar_range: *cav_lidar_m1
          out_cav_lidar_range: *cav_lidar_m1
          in_feature_shape: [128, 256]
          out_feature_shape: [128, 256]
          submodule_args:
            num_of_blocks: 3
            dim: 64
            
      in_head: 128
      anchor_number: *anchor_num_m1
      dir_args: *dir_args_m1
      
    fusion_method: v2xvit
    v2xvit:
      transformer:
        encoder: &encoder_m1
          # number of fusion blocks per encoder layer
          num_blocks: 1
          # number of encoder layers
          depth: 3
          use_roi_mask: true
          use_RTE: &use_RTE_m1 false
          RTE_ratio: &RTE_ratio_m1 0 # 2 means the dt has 100ms interval while 1 means 50 ms interval
          # agent-wise attention
          cav_att_config: &cav_att_config_m1
            dim: 128
            use_hetero: true
            use_RTE: *use_RTE_m1
            RTE_ratio: *RTE_ratio_m1
            heads: 8
            dim_head: 32
            dropout: 0.3
          # spatial-wise attention
          pwindow_att_config: &pwindow_att_config_m1
            dim: 128
            heads: [16, 8, 4]
            dim_head: [16, 32, 64]
            dropout: 0.3
            window_size: [4, 8, 16]
            relative_pos_embedding: true
            fusion_method: 'split_attn128'
          # feedforward condition
          feed_forward: &feed_forward_m1
            mlp_dim: 128
            dropout: 0.3
          sttf: &sttf_m1
            voxel_size: *voxel_size_m1
            downsample_rate: 4  

    # m3:
    #   core_method: *core_method_m3
    #   sensor_type: *sensor_type_m3
    #   lidar_range: *cav_lidar_m3

    #   encoder_args:
    #     voxel_size: *voxel_size_m3
    #     lidar_range: *cav_lidar_m3
    #     mean_vfe:
    #       num_point_features: 4
    #     spconv:
    #       num_features_in: 4
    #       num_features_out: 64
    #     map2bev:
    #       feature_num: 128

    #   backbone_args:
    #     layer_nums: [3,]
    #     layer_strides: [1,]
    #     num_filters: [64,]
    #     upsample_strides: [1]
    #     num_upsample_filter: [128, ]
    #     inplanes: 128

    #   shrink_header: 
    #     kernal_size: [ 3 ]
    #     stride: [ 2 ]
    #     padding: [ 1 ]
    #     dim: [ 128 ]
    #     input_dim: 128 # 128 * 3

    #   aligner_args:
    #     core_method: identity
    #   adapter:
    #     core_method: adapterconvnext
    #     args:
    #       in_channels: 128
    #       out_channels: 128
    #       in_cav_lidar_range: *cav_lidar_m3
    #       out_cav_lidar_range: *cav_lidar_m3
    #       in_feature_shape: [128, 256]
    #       out_feature_shape: [128, 256]
    #       submodule_args:
    #         num_of_blocks: 3
    #         dim: 64
    #   reverter:
    #     core_method: adapterconvnext
    #     args:
    #       in_channels: 128
    #       out_channels: 128
    #       in_cav_lidar_range: *cav_lidar_m3
    #       out_cav_lidar_range: *cav_lidar_m3
    #       in_feature_shape: [128, 256]
    #       out_feature_shape: [128, 256]
    #       submodule_args:
    #         num_of_blocks: 3
    #         dim: 64
            
      
    #   in_head: 128
    #   anchor_number: *anchor_num_m3
    #   dir_args: *dir_args_m3

    #   fusion_method: att
    #   att:
    #     feat_dim: 128 
    


loss_adapter:
  core_method: adapter_loss
  args:
    alpha_P2M: 9.0
    alpha_M2P2M: 1.0
    alpha_M2P: 10.0

loss:
  m0:
    core_method: point_pillar_depth_loss
    args:
      pos_cls_weight: 2.0
      cls:
        type: 'SigmoidFocalLoss'
        alpha: 0.25
        gamma: 2.0
        weight: 2.0   # matter?
      reg:
        type: 'WeightedSmoothL1Loss'
        sigma: 3.0
        codewise: true
        weight: 2.0
      dir:
        type: 'WeightedSoftmaxClassificationLoss'
        weight: 0.2
        args: *dir_args_m0
      depth:
        weight: 1.0
  m1:
    core_method: point_pillar_depth_loss
    args:
      pos_cls_weight: 2.0
      cls:
        type: 'SigmoidFocalLoss'
        alpha: 0.25
        gamma: 2.0
        weight: 2.0   # matter?
      reg:
        type: 'WeightedSmoothL1Loss'
        sigma: 3.0
        codewise: true
        weight: 2.0
      dir:
        type: 'WeightedSoftmaxClassificationLoss'
        weight: 0.2
        args: *dir_args_m1
      depth:
        weight: 1.0

optimizer:
  core_method: Adam
  lr: 0.01
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [1, 3, 4]
  # step_size: [3]

